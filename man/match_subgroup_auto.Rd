% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching_divide_conquer.R
\name{match_subgroup_auto}
\alias{match_subgroup_auto}
\title{Performs 1-to-k matching with fine balance, or pair matching with near-fine balance 
when fine balance is infeasible, depending on the data.}
\usage{
match_subgroup_auto(Z, X, fine, data, kmax, method = "maha", lambda = 1000)
}
\arguments{
\item{Z}{A length-n vector of treatment indicator.}

\item{X}{A n-by-p numerical data.frame of covariates, including the covariate(s) used for fine balance.}

\item{fine}{The column names of the covariate(s) used for fine balance.}

\item{data}{The original dataset used to construct final results.}

\item{kmax}{The maximum number of control units matched to each treated unit. 
Its value is identical with the number of strata or subgroups}

\item{method}{Method used to compute treated-control distance.}

\item{lambda}{A penalty that does a trade-off between two parts of the network.}
}
\value{
This function returns a data frame that is the same as the input "data", 
except that a column called "distance" and a column called "matched_to_index" are added to it.
}
\description{
Performs 1-to-k matching with fine balance, or pair matching with near-fine balance 
when fine balance is infeasible, depending on the data.
}
\examples{
\dontrun{
data("dt_rhc")
data("dt_rhc_ac")
p <- glm(z ~ . - ninsclasMedicare 
              - `ninsclasMedicare & Medicaid` 
              - `ninsclasNo insurance` 
              - `ninsclasPrivate` 
              - `ninsclasPrivate & Medicare`,
              data = dt_rhc_ac, family = binomial())
dt_rhc_ac$p <-  predict(p, type = "response")
Group_index <- assign_int(dt_rhc_ac$p,beta = 4)
dt_rhc_ac$subgroup <- Group_index

dt_rhc$p <- dt_rhc_ac$p
dt_rhc$subgroup <- dt_rhc_ac$subgroup
dt_rhc_2 <- dt_rhc[dt_rhc$subgroup==2,]
dt_rhc_ac_2 <- dt_rhc_ac[dt_rhc_ac$subgroup == 2,] 
dt_rhc_ac_2_cov <- dt_rhc_ac_2[, setdiff(colnames(dt_rhc_ac_2), c("z","subgroup")), drop = FALSE]

A_matched_2 <- match_subgroup_auto(Z = dt_rhc_ac_2$z, X = dt_rhc_ac_2_cov, 
                          fine = c("ninsclasMedicare",
                                   "ninsclasMedicare & Medicaid",
                                   "ninsclasNo insurance",
                                   "ninsclasPrivate",
                                   "ninsclasPrivate & Medicare"),
                          data = dt_rhc_2, kmax = 4, method = "maha")
}

}
